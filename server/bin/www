#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const userService = require('../services/userService');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create admin user function
 */
async function createAdminUser() {
  try {
    // Admin user details
    const adminData = {
      email: 'admin@example.com',
      password: 'adminpassword',
      username: 'admin',
      firstName: 'Admin',
      lastName: 'User',
      role: 'admin'
    };

    console.log('Creating admin user...');
    const admin = await userService.createAdminUser(adminData);
    console.log('Admin user created successfully!');
  } catch (error) {
    // If the error is about duplicate entry, the admin might already exist
    if (error.name === 'SequelizeUniqueConstraintError') {
      console.log('Admin user already exists.');
    } else {
      console.error('Error creating admin user:', error.message);
    }
  }
}

/**
 * Listen on provided port, on all network interfaces.
 */
const db = require("../models/");
db.sequelize
  .sync({force: true})
  .then(async () => {
    // Create admin user after database sync
    await createAdminUser();
    
    server.listen(port, () => {
      console.log(`Server running on localhost:${port}`)
    });
  })
  .catch((e) => {
    console.log(e);
  });
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
